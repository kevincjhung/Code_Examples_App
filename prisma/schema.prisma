// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// user from docs
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt DateTime @default(now())
  posts     Post[]
  comment   Comment[]
  like      Like[]
}


// Post {id, code, language, totalComments, totalLikes, createdAt, userId}
model Post {
  id            Int      @default(autoincrement()) @id
  code          String   
  language      String
  title         String
  totalComments Int      @default(0)
  totalLikes    Int      @default(0)
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String      // relation scalar field  (used in the `@relation` attribute above)
  comments      Comment[]
  likes         Like[]

}


// Comment { id, content, createdAt, userId }
model Comment {
  id        Int      @default(autoincrement()) @id
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String      
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}


// Like { id, createdAt, updatedAt, userId }
model Like {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int  
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}